AWSTemplateFormatVersion: '2010-09-09'
Description: This CloudFormation template performs all the necessary steps of creating
  a VPC, subnet, and security groups; deploying a MemSQL cluster; and configuring
  the Studio environment with your cluster's information. This creates a MemSQL cluster
  running memsql-server 6.8.3-ce74eb6a0c, memsql-studio 1.6.3, and memsql-toolbox
  1.1.1.
Parameters:
  AggInstanceType:
    Default: m4.2xlarge
    Type: String
    Description: 'EC2 instance type for master aggregator and child aggregators. c5/c5d
      instances are not available in every Availability Zone. AWS Instance type information:
      https://aws.amazon.com/ec2/instance-types'
    AllowedValues:
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
  LeafInstanceType:
    Default: m4.2xlarge
    Type: String
    Description: EC2 instance type for leaves
    AllowedValues:
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
  AvailabilityZone:
    Default: ''
    Type: String
    Description: Availability zone to use for the subnet that will be created. Leave
      blank to let AWS select a zone for you. Please specify a valid zone if you are
      using c5/c5d instance types.
  NumAggregators:
    Default: 1
    MinValue: 0
    Type: Number
    Description: Number of child aggregators in the cluster (between 0 and 20). Separately,
      the master aggregator will automatically be created
    MaxValue: 20
  License:
    AllowedPattern: .+
    Type: String
    NoEcho: true
    Description: A license you received from the MemSQL Customer Portal
    ConstraintDescription: Must provide a MemSQL license from the MemSQL Customer
      Portal at https://portal.memsql.com.
  EnableHighAvailability:
    Default: 'true'
    Type: String
    Description: 'You should only specify an even number of leaves if enabled as an
      extra leaf will not be utilized. Learn more about High Availability: https://docs.memsql.com/operational-manual/v6.5/managing-high-availability/'
    AllowedValues:
      - 'true'
      - 'false'
  NumLeaves:
    Default: 2
    MinValue: 1
    Type: Number
    Description: Number of leaves in the cluster (between 1 and 100)
    MaxValue: 100
  RootPassword:
    AllowedPattern: .+
    Type: String
    NoEcho: true
    Description: Provide a MemSQL root password that will be set for all the nodes
      in your cluster
    ConstraintDescription: Must provide a MemSQL root password
  RemoteAccessCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: '0.0.0.0/0'
    Type: String
    Description: IP CIDR range that is allowed to access the nodes (including SSH
      access, connecting to MemSQL on port 3306, viewing MemSQL studio).
    ConstraintDescription: CIDR range must be in the form x.x.x.x/x
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 Key Pair to allow SSH access to the nodes.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - KeyPairName
          - License
          - RootPassword
        Label:
          default: Basic Setup (Required)
      - Parameters:
          - AggInstanceType
          - NumAggregators
          - LeafInstanceType
          - NumLeaves
          - EnableHighAvailability
          - AvailabilityZone
          - RemoteAccessCIDR
        Label:
          default: Advanced Configuration
    ParameterLabels:
      LeafInstanceType:
        default: Leaf Instance Type*
      AvailabilityZone:
        default: Availability Zone
      NumAggregators:
        default: Number of Child Aggregators*
      License:
        default: License*
      EnableHighAvailability:
        default: Enable High Availability*
      NumLeaves:
        default: Number of Leaves*
      RootPassword:
        default: MemSQL Password*
      KeyPairName:
        default: Key Name*
      RemoteAccessCIDR:
        default: CIDR Range for Remote Access
      AggInstanceType:
        default: Aggregator Instance Type*
Mappings:
  RegionMap:
    us-west-1:
      AMI: ami-09d18e24beb94299e
    us-east-1:
      AMI: ami-0ab233f36ff4b8135
    ap-northeast-1:
      AMI: ami-0f0824923adbb3bc4
    sa-east-1:
      AMI: ami-0de0318be2d0d0fb1
    ap-northeast-2:
      AMI: ami-042465533d353e663
    ap-southeast-1:
      AMI: ami-058cbfde98aa3ead2
    ca-central-1:
      AMI: ami-00b5538cb737e18d6
    ap-southeast-2:
      AMI: ami-0d14d4b85af3ff94c
    us-west-2:
      AMI: ami-0aaebab4909efbffe
    us-east-2:
      AMI: ami-027d3b41528ec66b7
    ap-south-1:
      AMI: ami-04da877b3c1c33e3b
    eu-central-1:
      AMI: ami-065c6fd9fbbe2e2b5
    eu-west-1:
      AMI: ami-0a3d079850b9313de
    eu-west-2:
      AMI: ami-05faccaaa72df0e7d
    eu-west-3:
      AMI: ami-0bb2e5e00165cf89b
Conditions:
  CreateLeaf31: !Or
    - !Condition 'CreateLeaf32'
    - !Equals
      - !Ref 'NumLeaves'
      - 31
  CreateLeaf30: !Or
    - !Condition 'CreateLeaf31'
    - !Equals
      - !Ref 'NumLeaves'
      - 30
  CreateLeaf33: !Or
    - !Condition 'CreateLeaf34'
    - !Equals
      - !Ref 'NumLeaves'
      - 33
  CreateLeaf32: !Or
    - !Condition 'CreateLeaf33'
    - !Equals
      - !Ref 'NumLeaves'
      - 32
  CreateLeaf35: !Or
    - !Condition 'CreateLeaf36'
    - !Equals
      - !Ref 'NumLeaves'
      - 35
  CreateLeaf34: !Or
    - !Condition 'CreateLeaf35'
    - !Equals
      - !Ref 'NumLeaves'
      - 34
  CreateLeaf37: !Or
    - !Condition 'CreateLeaf38'
    - !Equals
      - !Ref 'NumLeaves'
      - 37
  CreateLeaf36: !Or
    - !Condition 'CreateLeaf37'
    - !Equals
      - !Ref 'NumLeaves'
      - 36
  CreateLeaf39: !Or
    - !Condition 'CreateLeaf40'
    - !Equals
      - !Ref 'NumLeaves'
      - 39
  CreateLeaf38: !Or
    - !Condition 'CreateLeaf39'
    - !Equals
      - !Ref 'NumLeaves'
      - 38
  UseDefaultAZ: !Equals
    - !Ref 'AvailabilityZone'
    - ''
  CreateLeaf44: !Or
    - !Condition 'CreateLeaf45'
    - !Equals
      - !Ref 'NumLeaves'
      - 44
  CreateLeaf45: !Or
    - !Condition 'CreateLeaf46'
    - !Equals
      - !Ref 'NumLeaves'
      - 45
  CreateLeaf46: !Or
    - !Condition 'CreateLeaf47'
    - !Equals
      - !Ref 'NumLeaves'
      - 46
  CreateLeaf47: !Or
    - !Condition 'CreateLeaf48'
    - !Equals
      - !Ref 'NumLeaves'
      - 47
  CreateLeaf40: !Or
    - !Condition 'CreateLeaf41'
    - !Equals
      - !Ref 'NumLeaves'
      - 40
  CreateLeaf41: !Or
    - !Condition 'CreateLeaf42'
    - !Equals
      - !Ref 'NumLeaves'
      - 41
  CreateLeaf42: !Or
    - !Condition 'CreateLeaf43'
    - !Equals
      - !Ref 'NumLeaves'
      - 42
  CreateLeaf43: !Or
    - !Condition 'CreateLeaf44'
    - !Equals
      - !Ref 'NumLeaves'
      - 43
  CreateLeaf48: !Or
    - !Condition 'CreateLeaf49'
    - !Equals
      - !Ref 'NumLeaves'
      - 48
  CreateLeaf49: !Or
    - !Condition 'CreateLeaf50'
    - !Equals
      - !Ref 'NumLeaves'
      - 49
  CreateLeaf100: !Equals
    - !Ref 'NumLeaves'
    - 100
  CreateLeaf57: !Or
    - !Condition 'CreateLeaf58'
    - !Equals
      - !Ref 'NumLeaves'
      - 57
  CreateLeaf56: !Or
    - !Condition 'CreateLeaf57'
    - !Equals
      - !Ref 'NumLeaves'
      - 56
  CreateLeaf55: !Or
    - !Condition 'CreateLeaf56'
    - !Equals
      - !Ref 'NumLeaves'
      - 55
  CreateLeaf54: !Or
    - !Condition 'CreateLeaf55'
    - !Equals
      - !Ref 'NumLeaves'
      - 54
  CreateLeaf53: !Or
    - !Condition 'CreateLeaf54'
    - !Equals
      - !Ref 'NumLeaves'
      - 53
  CreateLeaf52: !Or
    - !Condition 'CreateLeaf53'
    - !Equals
      - !Ref 'NumLeaves'
      - 52
  CreateLeaf51: !Or
    - !Condition 'CreateLeaf52'
    - !Equals
      - !Ref 'NumLeaves'
      - 51
  CreateLeaf50: !Or
    - !Condition 'CreateLeaf51'
    - !Equals
      - !Ref 'NumLeaves'
      - 50
  CreateLeaf59: !Or
    - !Condition 'CreateLeaf60'
    - !Equals
      - !Ref 'NumLeaves'
      - 59
  CreateLeaf58: !Or
    - !Condition 'CreateLeaf59'
    - !Equals
      - !Ref 'NumLeaves'
      - 58
  CreateAggregator16: !Or
    - !Condition 'CreateAggregator17'
    - !Equals
      - !Ref 'NumAggregators'
      - 16
  CreateAggregator17: !Or
    - !Condition 'CreateAggregator18'
    - !Equals
      - !Ref 'NumAggregators'
      - 17
  CreateAggregator14: !Or
    - !Condition 'CreateAggregator15'
    - !Equals
      - !Ref 'NumAggregators'
      - 14
  CreateAggregator15: !Or
    - !Condition 'CreateAggregator16'
    - !Equals
      - !Ref 'NumAggregators'
      - 15
  CreateAggregator12: !Or
    - !Condition 'CreateAggregator13'
    - !Equals
      - !Ref 'NumAggregators'
      - 12
  CreateAggregator13: !Or
    - !Condition 'CreateAggregator14'
    - !Equals
      - !Ref 'NumAggregators'
      - 13
  CreateAggregator10: !Or
    - !Condition 'CreateAggregator11'
    - !Equals
      - !Ref 'NumAggregators'
      - 10
  CreateAggregator11: !Or
    - !Condition 'CreateAggregator12'
    - !Equals
      - !Ref 'NumAggregators'
      - 11
  CreateAggregator18: !Or
    - !Condition 'CreateAggregator19'
    - !Equals
      - !Ref 'NumAggregators'
      - 18
  CreateAggregator19: !Or
    - !Condition 'CreateAggregator20'
    - !Equals
      - !Ref 'NumAggregators'
      - 19
  CreateLeaf62: !Or
    - !Condition 'CreateLeaf63'
    - !Equals
      - !Ref 'NumLeaves'
      - 62
  CreateLeaf63: !Or
    - !Condition 'CreateLeaf64'
    - !Equals
      - !Ref 'NumLeaves'
      - 63
  CreateLeaf60: !Or
    - !Condition 'CreateLeaf61'
    - !Equals
      - !Ref 'NumLeaves'
      - 60
  CreateLeaf61: !Or
    - !Condition 'CreateLeaf62'
    - !Equals
      - !Ref 'NumLeaves'
      - 61
  CreateLeaf66: !Or
    - !Condition 'CreateLeaf67'
    - !Equals
      - !Ref 'NumLeaves'
      - 66
  CreateLeaf67: !Or
    - !Condition 'CreateLeaf68'
    - !Equals
      - !Ref 'NumLeaves'
      - 67
  CreateLeaf64: !Or
    - !Condition 'CreateLeaf65'
    - !Equals
      - !Ref 'NumLeaves'
      - 64
  CreateLeaf65: !Or
    - !Condition 'CreateLeaf66'
    - !Equals
      - !Ref 'NumLeaves'
      - 65
  CreateLeaf68: !Or
    - !Condition 'CreateLeaf69'
    - !Equals
      - !Ref 'NumLeaves'
      - 68
  CreateLeaf69: !Or
    - !Condition 'CreateLeaf70'
    - !Equals
      - !Ref 'NumLeaves'
      - 69
  CreateLeaf79: !Or
    - !Condition 'CreateLeaf80'
    - !Equals
      - !Ref 'NumLeaves'
      - 79
  CreateLeaf78: !Or
    - !Condition 'CreateLeaf79'
    - !Equals
      - !Ref 'NumLeaves'
      - 78
  CreateLeaf75: !Or
    - !Condition 'CreateLeaf76'
    - !Equals
      - !Ref 'NumLeaves'
      - 75
  CreateLeaf74: !Or
    - !Condition 'CreateLeaf75'
    - !Equals
      - !Ref 'NumLeaves'
      - 74
  CreateLeaf77: !Or
    - !Condition 'CreateLeaf78'
    - !Equals
      - !Ref 'NumLeaves'
      - 77
  CreateLeaf76: !Or
    - !Condition 'CreateLeaf77'
    - !Equals
      - !Ref 'NumLeaves'
      - 76
  CreateLeaf71: !Or
    - !Condition 'CreateLeaf72'
    - !Equals
      - !Ref 'NumLeaves'
      - 71
  CreateLeaf70: !Or
    - !Condition 'CreateLeaf71'
    - !Equals
      - !Ref 'NumLeaves'
      - 70
  CreateLeaf73: !Or
    - !Condition 'CreateLeaf74'
    - !Equals
      - !Ref 'NumLeaves'
      - 73
  CreateLeaf72: !Or
    - !Condition 'CreateLeaf73'
    - !Equals
      - !Ref 'NumLeaves'
      - 72
  CreateAggregator8: !Or
    - !Condition 'CreateAggregator9'
    - !Equals
      - !Ref 'NumAggregators'
      - 8
  CreateAggregator9: !Or
    - !Condition 'CreateAggregator10'
    - !Equals
      - !Ref 'NumAggregators'
      - 9
  CreateAggregator4: !Or
    - !Condition 'CreateAggregator5'
    - !Equals
      - !Ref 'NumAggregators'
      - 4
  CreateAggregator5: !Or
    - !Condition 'CreateAggregator6'
    - !Equals
      - !Ref 'NumAggregators'
      - 5
  CreateAggregator6: !Or
    - !Condition 'CreateAggregator7'
    - !Equals
      - !Ref 'NumAggregators'
      - 6
  CreateAggregator7: !Or
    - !Condition 'CreateAggregator8'
    - !Equals
      - !Ref 'NumAggregators'
      - 7
  CreateAggregator1: !Or
    - !Condition 'CreateAggregator2'
    - !Equals
      - !Ref 'NumAggregators'
      - 1
  CreateAggregator2: !Or
    - !Condition 'CreateAggregator3'
    - !Equals
      - !Ref 'NumAggregators'
      - 2
  CreateAggregator3: !Or
    - !Condition 'CreateAggregator4'
    - !Equals
      - !Ref 'NumAggregators'
      - 3
  CreateLeaf80: !Or
    - !Condition 'CreateLeaf81'
    - !Equals
      - !Ref 'NumLeaves'
      - 80
  CreateLeaf81: !Or
    - !Condition 'CreateLeaf82'
    - !Equals
      - !Ref 'NumLeaves'
      - 81
  CreateLeaf82: !Or
    - !Condition 'CreateLeaf83'
    - !Equals
      - !Ref 'NumLeaves'
      - 82
  CreateLeaf83: !Or
    - !Condition 'CreateLeaf84'
    - !Equals
      - !Ref 'NumLeaves'
      - 83
  CreateLeaf84: !Or
    - !Condition 'CreateLeaf85'
    - !Equals
      - !Ref 'NumLeaves'
      - 84
  CreateLeaf85: !Or
    - !Condition 'CreateLeaf86'
    - !Equals
      - !Ref 'NumLeaves'
      - 85
  CreateLeaf86: !Or
    - !Condition 'CreateLeaf87'
    - !Equals
      - !Ref 'NumLeaves'
      - 86
  CreateLeaf87: !Or
    - !Condition 'CreateLeaf88'
    - !Equals
      - !Ref 'NumLeaves'
      - 87
  CreateLeaf88: !Or
    - !Condition 'CreateLeaf89'
    - !Equals
      - !Ref 'NumLeaves'
      - 88
  CreateLeaf89: !Or
    - !Condition 'CreateLeaf90'
    - !Equals
      - !Ref 'NumLeaves'
      - 89
  CreateAggregator20: !Equals
    - !Ref 'NumAggregators'
    - 20
  CreateLeaf7: !Or
    - !Condition 'CreateLeaf8'
    - !Equals
      - !Ref 'NumLeaves'
      - 7
  CreateLeaf6: !Or
    - !Condition 'CreateLeaf7'
    - !Equals
      - !Ref 'NumLeaves'
      - 6
  CreateLeaf5: !Or
    - !Condition 'CreateLeaf6'
    - !Equals
      - !Ref 'NumLeaves'
      - 5
  CreateLeaf4: !Or
    - !Condition 'CreateLeaf5'
    - !Equals
      - !Ref 'NumLeaves'
      - 4
  CreateLeaf3: !Or
    - !Condition 'CreateLeaf4'
    - !Equals
      - !Ref 'NumLeaves'
      - 3
  CreateLeaf2: !Or
    - !Condition 'CreateLeaf3'
    - !Equals
      - !Ref 'NumLeaves'
      - 2
  CreateLeaf1: !Or
    - !Condition 'CreateLeaf2'
    - !Equals
      - !Ref 'NumLeaves'
      - 1
  CreateLeaf9: !Or
    - !Condition 'CreateLeaf10'
    - !Equals
      - !Ref 'NumLeaves'
      - 9
  CreateLeaf8: !Or
    - !Condition 'CreateLeaf9'
    - !Equals
      - !Ref 'NumLeaves'
      - 8
  CreateLeaf19: !Or
    - !Condition 'CreateLeaf20'
    - !Equals
      - !Ref 'NumLeaves'
      - 19
  CreateLeaf18: !Or
    - !Condition 'CreateLeaf19'
    - !Equals
      - !Ref 'NumLeaves'
      - 18
  CreateLeaf13: !Or
    - !Condition 'CreateLeaf14'
    - !Equals
      - !Ref 'NumLeaves'
      - 13
  CreateLeaf12: !Or
    - !Condition 'CreateLeaf13'
    - !Equals
      - !Ref 'NumLeaves'
      - 12
  CreateLeaf11: !Or
    - !Condition 'CreateLeaf12'
    - !Equals
      - !Ref 'NumLeaves'
      - 11
  CreateLeaf10: !Or
    - !Condition 'CreateLeaf11'
    - !Equals
      - !Ref 'NumLeaves'
      - 10
  CreateLeaf17: !Or
    - !Condition 'CreateLeaf18'
    - !Equals
      - !Ref 'NumLeaves'
      - 17
  CreateLeaf16: !Or
    - !Condition 'CreateLeaf17'
    - !Equals
      - !Ref 'NumLeaves'
      - 16
  CreateLeaf15: !Or
    - !Condition 'CreateLeaf16'
    - !Equals
      - !Ref 'NumLeaves'
      - 15
  CreateLeaf14: !Or
    - !Condition 'CreateLeaf15'
    - !Equals
      - !Ref 'NumLeaves'
      - 14
  CreateLeaf93: !Or
    - !Condition 'CreateLeaf94'
    - !Equals
      - !Ref 'NumLeaves'
      - 93
  CreateLeaf92: !Or
    - !Condition 'CreateLeaf93'
    - !Equals
      - !Ref 'NumLeaves'
      - 92
  CreateLeaf91: !Or
    - !Condition 'CreateLeaf92'
    - !Equals
      - !Ref 'NumLeaves'
      - 91
  CreateLeaf90: !Or
    - !Condition 'CreateLeaf91'
    - !Equals
      - !Ref 'NumLeaves'
      - 90
  CreateLeaf97: !Or
    - !Condition 'CreateLeaf98'
    - !Equals
      - !Ref 'NumLeaves'
      - 97
  CreateLeaf96: !Or
    - !Condition 'CreateLeaf97'
    - !Equals
      - !Ref 'NumLeaves'
      - 96
  CreateLeaf95: !Or
    - !Condition 'CreateLeaf96'
    - !Equals
      - !Ref 'NumLeaves'
      - 95
  CreateLeaf94: !Or
    - !Condition 'CreateLeaf95'
    - !Equals
      - !Ref 'NumLeaves'
      - 94
  CreateLeaf99: !Or
    - !Condition 'CreateLeaf100'
    - !Equals
      - !Ref 'NumLeaves'
      - 99
  CreateLeaf98: !Or
    - !Condition 'CreateLeaf99'
    - !Equals
      - !Ref 'NumLeaves'
      - 98
  CreateLeaf26: !Or
    - !Condition 'CreateLeaf27'
    - !Equals
      - !Ref 'NumLeaves'
      - 26
  CreateLeaf27: !Or
    - !Condition 'CreateLeaf28'
    - !Equals
      - !Ref 'NumLeaves'
      - 27
  CreateLeaf24: !Or
    - !Condition 'CreateLeaf25'
    - !Equals
      - !Ref 'NumLeaves'
      - 24
  CreateLeaf25: !Or
    - !Condition 'CreateLeaf26'
    - !Equals
      - !Ref 'NumLeaves'
      - 25
  CreateLeaf22: !Or
    - !Condition 'CreateLeaf23'
    - !Equals
      - !Ref 'NumLeaves'
      - 22
  CreateLeaf23: !Or
    - !Condition 'CreateLeaf24'
    - !Equals
      - !Ref 'NumLeaves'
      - 23
  CreateLeaf20: !Or
    - !Condition 'CreateLeaf21'
    - !Equals
      - !Ref 'NumLeaves'
      - 20
  CreateLeaf21: !Or
    - !Condition 'CreateLeaf22'
    - !Equals
      - !Ref 'NumLeaves'
      - 21
  CreateLeaf28: !Or
    - !Condition 'CreateLeaf29'
    - !Equals
      - !Ref 'NumLeaves'
      - 28
  CreateLeaf29: !Or
    - !Condition 'CreateLeaf30'
    - !Equals
      - !Ref 'NumLeaves'
      - 29
Resources:
  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'NetworkLoadBalancer'
      DefaultActions:
        - TargetGroupArn: !Ref 'NLBTargetGroup'
          Type: forward
      Protocol: TCP
      Port: 3306
  Aggregator20:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator20 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 20
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator20
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf64:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf64 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 64
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf64
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf65:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf65 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 65
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf65
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf66:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf66 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 66
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf66
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf67:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf67 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 67
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf67
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf60:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf60 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 60
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf60
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf61:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf61 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 61
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf61
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf62:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf62 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 62
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf62
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf63:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf63 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 63
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf63
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf68:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf68 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 68
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf68
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf69:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf69 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 69
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf69
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf5:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf5 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 5
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf5
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf4:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf4 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 4
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf4
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf7:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf7 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 7
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf7
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf6:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf6 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 6
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf6
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf1:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf1 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 1
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf3:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf3 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 3
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf3
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf2:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf2 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 2
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf2
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf9:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf9 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 9
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf9
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf8:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf8 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 8
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf8
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf52:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf52 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 52
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf52
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf73:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf73 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 73
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf73
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf72:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf72 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 72
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf72
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf71:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf71 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 71
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf71
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf70:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf70 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 70
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf70
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf77:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf77 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 77
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf77
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf76:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf76 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 76
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf76
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf75:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf75 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 75
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf75
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf74:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf74 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 74
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf74
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPCID'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - RouteTable
  Leaf79:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf79 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 79
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf79
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf78:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf78 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 78
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf78
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator2:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator2 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 2
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator2
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator3:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator3 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 3
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator3
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator1:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator1 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 1
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator6:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator6 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 6
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator6
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator7:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator7 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 7
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator7
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator4:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator4 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 4
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator4
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator5:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator5 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 5
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator5
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Internal22AccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId: !Ref 'InternalAccess'
      ToPort: '22'
      IpProtocol: tcp
      GroupId: !Ref 'InternalAccess'
      FromPort: '22'
  Aggregator8:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator8 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 8
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator8
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator9:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator9 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 9
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator9
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  AggregatorsWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: !Ref 'NumAggregators'
      Handle: !Ref 'AggregatorsWaitHandle'
      Timeout: 3000
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref 'InternetGateway'
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'PublicRouteTable'
    DependsOn: VPCGatewayAttachment
  Master:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Master --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\ncheck_error memsqlctl set-license --license\
            \ '${LICENSE}' --yes\n\ncheck_error memsqlctl bootstrap-aggregator --host\
            \ \"$INTERNAL_IP\" --yes\n\nif [ ${ENABLE_HIGH_AVAILABILITY} = true ];\
            \ then\n    check_error memsqlctl update-config --key=redundancy_level\
            \ --value=2 --set-global --yes\nfi\n\ncheck_error memsqlctl update-config\
            \ --key=sync_permissions --value=ON --set-global --yes\n\necho '${LEAF_DATA}'\
            \ > /tmp/leaves.json\nfor leaf in $(cat /tmp/leaves.json | jq -r '.[]');\
            \ do\n    host=$(echo $leaf | jq -r '.. | .Host? | select(.)')\n    port=$(echo\
            \ $leaf | jq -r '.. | .Port? | select(.)')\n\n    check_error memsqlctl\
            \ add-leaf --user root --password \"$ROOT_PASSWORD\" --host $host --port\
            \ $port --yes\ndone\n\necho '${AGGREGATOR_DATA}' > /tmp/aggregators.json\n\
            for aggregator in $(cat /tmp/aggregators.json | jq -r '.[]'); do\n   \
            \ host=$(echo $aggregator | jq -r '.. | .Host? | select(.)')\n    port=$(echo\
            \ $aggregator | jq -r '.. | .Port? | select(.)')\n\n    check_error memsqlctl\
            \ add-aggregator --user root --password \"$ROOT_PASSWORD\" --host $host\
            \ --port $port --yes\ndone\n\ncat << EOF > /var/lib/memsql-studio/studio.hcl\n\
            version = 1\n\ncluster \"${STACK_NAME}\" {\n  name = \"${STACK_NAME}\"\
            \n  description = \"Cluster profile populated by Cloudformation template\"\
            \n  hostname = \"localhost\"\n  port = 3306\n  profile = \"DEVELOPMENT\"\
            \n}\nEOF\n\ncheck_error systemctl start memsql-studio\n\nsudo -u ec2-user\
            \ ssh-keygen -t rsa -N \"\" -f /home/ec2-user/.ssh/memsql-toolbox\n\n\
            check_error memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"CREATE\
            \ DATABASE memsql_security\"\ncheck_error memsql -u root --password=\"\
            $ROOT_PASSWORD\" -s -N -e \"CREATE REFERENCE TABLE memsql_security.keys\
            \ (value TEXT, id int primary key auto_increment)\"\n\nPUBLIC_KEY=$(cat\
            \ /home/ec2-user/.ssh/memsql-toolbox.pub)\n\ncheck_error memsql -u root\
            \ --password=\"$ROOT_PASSWORD\" -s -N -e \"INSERT INTO memsql_security.keys(value)\
            \ values (\\\"$PUBLIC_KEY\\\")\"\n\nfor leaf in $(cat /tmp/leaves.json\
            \ | jq -r '.[]'); do\n    host=$(echo $leaf | jq -r '.. | .Host? | select(.)')\n\
            \n    until (sudo -u ec2-user memsql-toolbox-config register-host --host\
            \ $host -i /home/ec2-user/.ssh/memsql-toolbox -y); do\n        sleep 2\n\
            \    done\ndone\n\nfor aggregator in $(cat /tmp/aggregators.json | jq\
            \ -r '.[]'); do\n    host=$(echo $aggregator | jq -r '.. | .Host? | select(.)')\n\
            \n    until (sudo -u ec2-user memsql-toolbox-config register-host --host\
            \ $host -i /home/ec2-user/.ssh/memsql-toolbox -y); do\n        sleep 2\n\
            \    done\ndone\n\ncheck_error memsql -u root --password=\"$ROOT_PASSWORD\"\
            \ -s -N -e \"DROP DATABASE memsql_security\"\n\ncheck_error sudo -u ec2-user\
            \ memsql-toolbox-config register-host --host \"$INTERNAL_IP\" --localhost\
            \ --yes\n\n/opt/aws/bin/cfn-signal -s true '${WAIT_HANDLE}'\n"
          - LICENSE: !Ref 'License'
            ENABLE_HIGH_AVAILABILITY: !Ref 'EnableHighAvailability'
            STACK_NAME: !Ref 'AWS::StackName'
            AGGREGATOR_DATA: !GetAtt 'AggregatorsWaitCondition.Data'
            REGION: !Ref 'AWS::Region'
            TEMPLATE_TYPE: quickstart
            LEAF_DATA: !GetAtt 'LeavesWaitCondition.Data'
            WAIT_HANDLE: !Ref 'MasterWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Master
        - Key: Role
          Value: Master
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public80Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    DependsOn:
      - AggregatorsWaitCondition
      - LeavesWaitCondition
  Leaf88:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf88 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 88
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf88
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf89:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf89 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 89
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf89
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf86:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf86 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 86
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf86
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf87:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf87 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 87
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf87
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf84:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf84 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 84
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf84
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf85:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf85 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 85
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf85
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf82:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf82 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 82
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf82
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf83:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf83 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 83
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf83
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf80:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf80 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 80
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf80
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf81:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf81 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 81
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf81
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetID'
      RouteTableId: !Ref 'PublicRouteTable'
  Leaf99:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf99 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 99
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf99
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf98:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf98 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 98
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf98
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf95:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf95 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 95
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf95
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf94:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf94 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 94
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf94
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf97:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf97 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 97
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf97
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf96:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf96 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 96
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf96
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf91:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf91 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 91
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf91
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf90:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf90 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 90
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf90
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf93:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf93 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 93
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf93
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf92:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf92 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 92
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf92
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf15:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf15 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 15
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf15
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf14:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf14 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 14
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf14
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf17:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf17 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 17
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf17
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf16:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf16 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 16
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf16
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf11:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf11 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 11
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf11
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf10:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf10 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 10
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf10
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf13:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf13 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 13
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf13
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf12:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf12 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 12
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf12
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  InternalAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCID'
      GroupDescription: Internal access to port 3306 and 22
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - InternalAccessSecurityGroup
  Leaf19:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf19 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 19
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf19
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf18:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf18 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 18
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf18
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  MasterWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref 'MasterWaitHandle'
      Timeout: 3000
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref 'PublicSubnetID'
      Scheme: internet-facing
      Type: network
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - LB
  MasterWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  Leaf20:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf20 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 20
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf20
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf21:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf21 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 21
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf21
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf22:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf22 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 22
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf22
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf23:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf23 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 23
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf23
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf24:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf24 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 24
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf24
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf25:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf25 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 25
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf25
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf26:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf26 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 26
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf26
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf27:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf27 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 27
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf27
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf28:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf28 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 28
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf28
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf29:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf29 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 29
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf29
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  AggregatorsWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  Public3306Access:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - ToPort: '3306'
          FromPort: '3306'
          IpProtocol: tcp
          CidrIp: !Ref 'RemoteAccessCIDR'
      VpcId: !Ref 'VPCID'
      GroupDescription: Public access to port 3306
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Public3306SecurityGroup
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPCID'
      InternetGatewayId: !Ref 'InternetGateway'
  Aggregator14:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator14 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 14
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator14
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator15:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator15 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 15
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator15
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator16:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator16 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 16
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator16
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator17:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator17 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 17
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator17
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator10:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator10 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 10
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator10
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator11:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator11 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 11
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator11
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator12:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator12 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 12
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator12
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator13:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator13 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 13
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator13
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator18:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator18 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 18
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator18
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Aggregator19:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Aggregator19 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an aggregator\nsleep 30\n\nget_public_key()\
            \ {\n    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT\
            \ value FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'AggregatorsWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Aggregator
              - 19
        - Key: Role
          Value: Aggregator
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'AggInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'Public3306Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateAggregator19
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf100:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf100 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 100
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf100
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf39:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf39 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 39
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf39
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf38:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf38 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 38
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf38
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf37:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf37 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 37
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf37
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf36:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf36 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 36
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf36
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf35:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf35 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 35
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf35
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf34:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf34 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 34
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf34
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf33:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf33 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 33
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf33
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf32:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf32 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 32
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf32
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf31:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf31 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 31
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf31
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf30:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf30 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 30
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf30
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  LeavesWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: !Ref 'NumLeaves'
      Handle: !Ref 'LeavesWaitHandle'
      Timeout: 3000
  VPCID:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - VPC
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3306
      VpcId: !Ref 'VPCID'
      Protocol: TCP
      Targets:
        - Port: 3306
          Id: !Ref 'Master'
        - !If
          - CreateAggregator1
          - Port: 3306
            Id: !Ref 'Aggregator1'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator2
          - Port: 3306
            Id: !Ref 'Aggregator2'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator3
          - Port: 3306
            Id: !Ref 'Aggregator3'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator4
          - Port: 3306
            Id: !Ref 'Aggregator4'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator5
          - Port: 3306
            Id: !Ref 'Aggregator5'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator6
          - Port: 3306
            Id: !Ref 'Aggregator6'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator7
          - Port: 3306
            Id: !Ref 'Aggregator7'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator8
          - Port: 3306
            Id: !Ref 'Aggregator8'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator9
          - Port: 3306
            Id: !Ref 'Aggregator9'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator10
          - Port: 3306
            Id: !Ref 'Aggregator10'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator11
          - Port: 3306
            Id: !Ref 'Aggregator11'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator12
          - Port: 3306
            Id: !Ref 'Aggregator12'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator13
          - Port: 3306
            Id: !Ref 'Aggregator13'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator14
          - Port: 3306
            Id: !Ref 'Aggregator14'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator15
          - Port: 3306
            Id: !Ref 'Aggregator15'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator16
          - Port: 3306
            Id: !Ref 'Aggregator16'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator17
          - Port: 3306
            Id: !Ref 'Aggregator17'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator18
          - Port: 3306
            Id: !Ref 'Aggregator18'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator19
          - Port: 3306
            Id: !Ref 'Aggregator19'
          - !Ref 'AWS::NoValue'
        - !If
          - CreateAggregator20
          - Port: 3306
            Id: !Ref 'Aggregator20'
          - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - TG
  Leaf48:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf48 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 48
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf48
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf49:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf49 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 49
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf49
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf42:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf42 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 42
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf42
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf43:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf43 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 43
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf43
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf40:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf40 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 40
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf40
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf41:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf41 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 41
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf41
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf46:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf46 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 46
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf46
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf47:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf47 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 47
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf47
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf44:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf44 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 44
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf44
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf45:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf45 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 45
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf45
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Internal3306AccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId: !Ref 'InternalAccess'
      ToPort: '3306'
      IpProtocol: tcp
      GroupId: !Ref 'InternalAccess'
      FromPort: '3306'
  LeavesWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  Public80Access:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - ToPort: '80'
          FromPort: '80'
          IpProtocol: tcp
          CidrIp: !Ref 'RemoteAccessCIDR'
      VpcId: !Ref 'VPCID'
      GroupDescription: Public access to port 80
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Public80SecurityGroup
  PublicSubnetID:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPCID'
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !If
        - UseDefaultAZ
        - !Ref 'AWS::NoValue'
        - !Ref 'AvailabilityZone'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Subnet
  Leaf59:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf59 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 59
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf59
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf58:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf58 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 58
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf58
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf51:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf51 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 51
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf51
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf50:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf50 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 50
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf50
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf53:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf53 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 53
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf53
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Public22Access:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - ToPort: '22'
          FromPort: '22'
          IpProtocol: tcp
          CidrIp: !Ref 'RemoteAccessCIDR'
      VpcId: !Ref 'VPCID'
      GroupDescription: Public access to port 22
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Public22SecurityGroup
  Leaf55:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf55 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 55
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf55
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf54:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf54 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 54
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf54
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf57:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf57 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 57
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf57
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
  Leaf56:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\nINTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n\
            \necho 'MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}' >> /etc/environment\n\
            export MEMSQL_OPS_USER_AGENT_SUFFIX=cf-${TEMPLATE_TYPE}\n\ncheck_error()\
            \ {\n    # capture stderr without stdout, which contains prompt and dry-run\n\
            \    OUT=$(\"$@\" 2>&1 > /dev/null)\n    if [ $? -ne 0 ]; then\n     \
            \   /opt/aws/bin/cfn-signal -s false --reason \"$OUT\" '${WAIT_HANDLE}'\n\
            \        exit 1\n    fi\n}\n\n/opt/aws/bin/cfn-init -v --stack '${STACK_NAME}'\
            \ --resource Leaf56 --region ${REGION}\nROOT_PASSWORD=$(cat /tmp/password.txt)\n\
            rm /tmp/password.txt\n\ncheck_error memsqlctl create-node --password \"\
            $ROOT_PASSWORD\" --yes\n\n/opt/aws/bin/cfn-signal -s true -d '{\"Host\"\
            :\"'$INTERNAL_IP'\",\"Port\":3306}' '${WAIT_HANDLE}'\n\n# Wait before\
            \ the EC2 instance for the master to spin up, create the\n# master aggregator\
            \ node, and add this node as an leaf\nsleep 30\n\nget_public_key() {\n\
            \    memsql -u root --password=\"$ROOT_PASSWORD\" -s -N -e \"SELECT value\
            \ FROM memsql_security.keys\" || echo ''\n}\n\nPUBLIC_KEY=\"$(get_public_key)\"\
            \n\nwhile [ -z \"$PUBLIC_KEY\" ]; do\n    sleep 2\n\n    PUBLIC_KEY=\"\
            $(get_public_key)\"\ndone\n\necho $PUBLIC_KEY >> /home/ec2-user/.ssh/authorized_keys\
            \ \n"
          - STACK_NAME: !Ref 'AWS::StackName'
            TEMPLATE_TYPE: quickstart
            REGION: !Ref 'AWS::Region'
            WAIT_HANDLE: !Ref 'LeavesWaitHandle'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Leaf
              - 56
        - Key: Role
          Value: Leaf
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1024
            VolumeType: 'gp2'
      KeyName: !Ref 'KeyPairName'
      InstanceType: !Ref 'LeafInstanceType'
      NetworkInterfaces:
        - SubnetId: !Ref 'PublicSubnetID'
          DeviceIndex: 0
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref 'Public22Access'
            - !Ref 'InternalAccess'
          AssociatePublicIpAddress: 'true'
    Condition: CreateLeaf56
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/password.txt:
              owner: root
              content: !Ref 'RootPassword'
              group: root
              mode: '000400'
Outputs:
  AggregatorLoadBalancerEndpoint:
    Description: Public DNSName of the load balancer for the aggregators
    Value: !GetAtt 'NetworkLoadBalancer.DNSName'
  MasterAggregator:
    Description: Public DNSName of the master aggregator
    Value: !GetAtt 'Master.PublicDnsName'

